/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.analysis;

import java.util.*;
import cordel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDecFuncao> copy = new ArrayList<PDecFuncao>(node.getDecFuncao());
            Collections.reverse(copy);
            for(PDecFuncao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            Collections.reverse(copy);
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADecVariavel(ADecVariavel node)
    {
        defaultIn(node);
    }

    public void outADecVariavel(ADecVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariavel(ADecVariavel node)
    {
        inADecVariavel(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getListaNomes() != null)
        {
            node.getListaNomes().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADecVariavel(node);
    }

    public void inAListaNomes(AListaNomes node)
    {
        defaultIn(node);
    }

    public void outAListaNomes(AListaNomes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaNomes(AListaNomes node)
    {
        inAListaNomes(node);
        {
            List<PIdAux> copy = new ArrayList<PIdAux>(node.getIdAux());
            Collections.reverse(copy);
            for(PIdAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAListaNomes(node);
    }

    public void inAIdAux(AIdAux node)
    {
        defaultIn(node);
    }

    public void outAIdAux(AIdAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAux(AIdAux node)
    {
        inAIdAux(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAIdAux(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoRumaTipo(ATipoRumaTipo node)
    {
        defaultIn(node);
    }

    public void outATipoRumaTipo(ATipoRumaTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRumaTipo(ATipoRumaTipo node)
    {
        inATipoRumaTipo(node);
        if(node.getDCol() != null)
        {
            node.getDCol().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getECol() != null)
        {
            node.getECol().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getRuma() != null)
        {
            node.getRuma().apply(this);
        }
        outATipoRumaTipo(node);
    }

    public void inATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        inATipoInteiroTipoBase(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outATipoInteiroTipoBase(node);
    }

    public void inATipoCaractereTipoBase(ATipoCaractereTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoCaractereTipoBase(ATipoCaractereTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCaractereTipoBase(ATipoCaractereTipoBase node)
    {
        inATipoCaractereTipoBase(node);
        if(node.getTipoCaractere() != null)
        {
            node.getTipoCaractere().apply(this);
        }
        outATipoCaractereTipoBase(node);
    }

    public void inATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipoBase(ATipoRealTipoBase node)
    {
        inATipoRealTipoBase(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outATipoRealTipoBase(node);
    }

    public void inATipoBoolTipoBase(ATipoBoolTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoBoolTipoBase(ATipoBoolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBoolTipoBase(ATipoBoolTipoBase node)
    {
        inATipoBoolTipoBase(node);
        if(node.getTipoBool() != null)
        {
            node.getTipoBool().apply(this);
        }
        outATipoBoolTipoBase(node);
    }

    public void inADecFuncao(ADecFuncao node)
    {
        defaultIn(node);
    }

    public void outADecFuncao(ADecFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFuncao(ADecFuncao node)
    {
        inADecFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getAssim() != null)
        {
            node.getAssim().apply(this);
        }
        if(node.getTipoRetorno() != null)
        {
            node.getTipoRetorno().apply(this);
        }
        if(node.getArrume() != null)
        {
            node.getArrume().apply(this);
        }
        outADecFuncao(node);
    }

    public void inATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetorno(ATipoTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetorno(ATipoTipoRetorno node)
    {
        inATipoTipoRetorno(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetorno(node);
    }

    public void inANadaTipoRetorno(ANadaTipoRetorno node)
    {
        defaultIn(node);
    }

    public void outANadaTipoRetorno(ANadaTipoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANadaTipoRetorno(ANadaTipoRetorno node)
    {
        inANadaTipoRetorno(node);
        if(node.getNada() != null)
        {
            node.getNada().apply(this);
        }
        outANadaTipoRetorno(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getParametrosAux1() != null)
        {
            node.getParametrosAux1().apply(this);
        }
        outAParametros(node);
    }

    public void inAParametrosAux1(AParametrosAux1 node)
    {
        defaultIn(node);
    }

    public void outAParametrosAux1(AParametrosAux1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosAux1(AParametrosAux1 node)
    {
        inAParametrosAux1(node);
        {
            List<PParametrosAux2> copy = new ArrayList<PParametrosAux2>(node.getParametrosAux2());
            Collections.reverse(copy);
            for(PParametrosAux2 e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametrosAux1(node);
    }

    public void inAParametrosAux2(AParametrosAux2 node)
    {
        defaultIn(node);
    }

    public void outAParametrosAux2(AParametrosAux2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosAux2(AParametrosAux2 node)
    {
        inAParametrosAux2(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getEParametro() != null)
        {
            node.getEParametro().apply(this);
        }
        outAParametrosAux2(node);
    }

    public void inAParametro(AParametro node)
    {
        defaultIn(node);
    }

    public void outAParametro(AParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametro(AParametro node)
    {
        inAParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getBlocoFim() != null)
        {
            node.getBlocoFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDecVariavel> copy = new ArrayList<PDecVariavel>(node.getDecVariavel());
            Collections.reverse(copy);
            for(PDecVariavel e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlocoInicio() != null)
        {
            node.getBlocoInicio().apply(this);
        }
        outABloco(node);
    }

    public void inAOpenStatementComando(AOpenStatementComando node)
    {
        defaultIn(node);
    }

    public void outAOpenStatementComando(AOpenStatementComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenStatementComando(AOpenStatementComando node)
    {
        inAOpenStatementComando(node);
        if(node.getOpenStatement() != null)
        {
            node.getOpenStatement().apply(this);
        }
        outAOpenStatementComando(node);
    }

    public void inAClosedStatementComando(AClosedStatementComando node)
    {
        defaultIn(node);
    }

    public void outAClosedStatementComando(AClosedStatementComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosedStatementComando(AClosedStatementComando node)
    {
        inAClosedStatementComando(node);
        if(node.getClosedStatement() != null)
        {
            node.getClosedStatement().apply(this);
        }
        outAClosedStatementComando(node);
    }

    public void inASeSimplesOpenStatement(ASeSimplesOpenStatement node)
    {
        defaultIn(node);
    }

    public void outASeSimplesOpenStatement(ASeSimplesOpenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSimplesOpenStatement(ASeSimplesOpenStatement node)
    {
        inASeSimplesOpenStatement(node);
        if(node.getSimpleStatement() != null)
        {
            node.getSimpleStatement().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSimplesOpenStatement(node);
    }

    public void inASeAbertoOpenStatement(ASeAbertoOpenStatement node)
    {
        defaultIn(node);
    }

    public void outASeAbertoOpenStatement(ASeAbertoOpenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeAbertoOpenStatement(ASeAbertoOpenStatement node)
    {
        inASeAbertoOpenStatement(node);
        if(node.getOpenStatement() != null)
        {
            node.getOpenStatement().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeAbertoOpenStatement(node);
    }

    public void inASeSenaoAbertoOpenStatement(ASeSenaoAbertoOpenStatement node)
    {
        defaultIn(node);
    }

    public void outASeSenaoAbertoOpenStatement(ASeSenaoAbertoOpenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeSenaoAbertoOpenStatement(ASeSenaoAbertoOpenStatement node)
    {
        inASeSenaoAbertoOpenStatement(node);
        if(node.getOpenStatement() != null)
        {
            node.getOpenStatement().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getClosedStatement() != null)
        {
            node.getClosedStatement().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeSenaoAbertoOpenStatement(node);
    }

    public void inAComandoEnquantoAbertoOpenStatement(AComandoEnquantoAbertoOpenStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoAbertoOpenStatement(AComandoEnquantoAbertoOpenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoAbertoOpenStatement(AComandoEnquantoAbertoOpenStatement node)
    {
        inAComandoEnquantoAbertoOpenStatement(node);
        if(node.getOpenStatement() != null)
        {
            node.getOpenStatement().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquantoAbertoOpenStatement(node);
    }

    public void inAComandoArrodeieAbertoOpenStatement(AComandoArrodeieAbertoOpenStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoArrodeieAbertoOpenStatement(AComandoArrodeieAbertoOpenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoArrodeieAbertoOpenStatement(AComandoArrodeieAbertoOpenStatement node)
    {
        inAComandoArrodeieAbertoOpenStatement(node);
        if(node.getOpenStatement() != null)
        {
            node.getOpenStatement().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getDir1() != null)
        {
            node.getDir1().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getEsq1() != null)
        {
            node.getEsq1().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getArrodeie() != null)
        {
            node.getArrodeie().apply(this);
        }
        outAComandoArrodeieAbertoOpenStatement(node);
    }

    public void inAClosedStatement(AClosedStatement node)
    {
        defaultIn(node);
    }

    public void outAClosedStatement(AClosedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosedStatement(AClosedStatement node)
    {
        inAClosedStatement(node);
        if(node.getSimpleStatement() != null)
        {
            node.getSimpleStatement().apply(this);
        }
        outAClosedStatement(node);
    }

    public void inASeFechadoClosedStatement(ASeFechadoClosedStatement node)
    {
        defaultIn(node);
    }

    public void outASeFechadoClosedStatement(ASeFechadoClosedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeFechadoClosedStatement(ASeFechadoClosedStatement node)
    {
        inASeFechadoClosedStatement(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeFechadoClosedStatement(node);
    }

    public void inAComandoEnquantoFechadoClosedStatement(AComandoEnquantoFechadoClosedStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoFechadoClosedStatement(AComandoEnquantoFechadoClosedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoFechadoClosedStatement(AComandoEnquantoFechadoClosedStatement node)
    {
        inAComandoEnquantoFechadoClosedStatement(node);
        if(node.getClosedStatement() != null)
        {
            node.getClosedStatement().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquantoFechadoClosedStatement(node);
    }

    public void inAComandoArrodeieFechadoClosedStatement(AComandoArrodeieFechadoClosedStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoArrodeieFechadoClosedStatement(AComandoArrodeieFechadoClosedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoArrodeieFechadoClosedStatement(AComandoArrodeieFechadoClosedStatement node)
    {
        inAComandoArrodeieFechadoClosedStatement(node);
        if(node.getClosedStatement() != null)
        {
            node.getClosedStatement().apply(this);
        }
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getDir1() != null)
        {
            node.getDir1().apply(this);
        }
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        if(node.getEsq1() != null)
        {
            node.getEsq1().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getArrodeie() != null)
        {
            node.getArrodeie().apply(this);
        }
        outAComandoArrodeieFechadoClosedStatement(node);
    }

    public void inAComandoRecebeSimpleStatement(AComandoRecebeSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoRecebeSimpleStatement(AComandoRecebeSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRecebeSimpleStatement(AComandoRecebeSimpleStatement node)
    {
        inAComandoRecebeSimpleStatement(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAComandoRecebeSimpleStatement(node);
    }

    public void inAComandoMandeSimpleStatement(AComandoMandeSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoMandeSimpleStatement(AComandoMandeSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoMandeSimpleStatement(AComandoMandeSimpleStatement node)
    {
        inAComandoMandeSimpleStatement(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVolta() != null)
        {
            node.getVolta().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getMande() != null)
        {
            node.getMande().apply(this);
        }
        outAComandoMandeSimpleStatement(node);
    }

    public void inAComandoBlocoSimpleStatement(AComandoBlocoSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoBlocoSimpleStatement(AComandoBlocoSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBlocoSimpleStatement(AComandoBlocoSimpleStatement node)
    {
        inAComandoBlocoSimpleStatement(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAComandoBlocoSimpleStatement(node);
    }

    public void inAComandoChamadaSimpleStatement(AComandoChamadaSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAComandoChamadaSimpleStatement(AComandoChamadaSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoChamadaSimpleStatement(AComandoChamadaSimpleStatement node)
    {
        inAComandoChamadaSimpleStatement(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAComandoChamadaSimpleStatement(node);
    }

    public void inAAtrib(AAtrib node)
    {
        defaultIn(node);
    }

    public void outAAtrib(AAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtrib(AAtrib node)
    {
        inAAtrib(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRecebe() != null)
        {
            node.getRecebe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtrib(node);
    }

    public void inAListaAtrib(AListaAtrib node)
    {
        defaultIn(node);
    }

    public void outAListaAtrib(AListaAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAtrib(AListaAtrib node)
    {
        inAListaAtrib(node);
        {
            List<PAtribAux> copy = new ArrayList<PAtribAux>(node.getAtribAux());
            Collections.reverse(copy);
            for(PAtribAux e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        outAListaAtrib(node);
    }

    public void inAAtribAux(AAtribAux node)
    {
        defaultIn(node);
    }

    public void outAAtribAux(AAtribAux node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribAux(AAtribAux node)
    {
        inAAtribAux(node);
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAAtribAux(node);
    }

    public void inAVarIdVar(AVarIdVar node)
    {
        defaultIn(node);
    }

    public void outAVarIdVar(AVarIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdVar(AVarIdVar node)
    {
        inAVarIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarIdVar(node);
    }

    public void inAVarExpVar(AVarExpVar node)
    {
        defaultIn(node);
    }

    public void outAVarExpVar(AVarExpVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExpVar(AVarExpVar node)
    {
        inAVarExpVar(node);
        if(node.getDCol() != null)
        {
            node.getDCol().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getECol() != null)
        {
            node.getECol().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExpVar(node);
    }

    public void inAExpIgualExp(AExpIgualExp node)
    {
        defaultIn(node);
    }

    public void outAExpIgualExp(AExpIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpIgualExp(AExpIgualExp node)
    {
        inAExpIgualExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpIgualExp(node);
    }

    public void inAExpMaiorIgualExp(AExpMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorIgualExp(AExpMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorIgualExp(AExpMaiorIgualExp node)
    {
        inAExpMaiorIgualExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpMaiorIgualExp(node);
    }

    public void inAExpMenorIgualExp(AExpMenorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAExpMenorIgualExp(AExpMenorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorIgualExp(AExpMenorIgualExp node)
    {
        inAExpMenorIgualExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpMenorIgualExp(node);
    }

    public void inAExpMenorQueExp(AExpMenorQueExp node)
    {
        defaultIn(node);
    }

    public void outAExpMenorQueExp(AExpMenorQueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorQueExp(AExpMenorQueExp node)
    {
        inAExpMenorQueExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpMenorQueExp(node);
    }

    public void inAExpMaiorQueExp(AExpMaiorQueExp node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorQueExp(AExpMaiorQueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorQueExp(AExpMaiorQueExp node)
    {
        inAExpMaiorQueExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getMaiorQue() != null)
        {
            node.getMaiorQue().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpMaiorQueExp(node);
    }

    public void inAExpNaoExp(AExpNaoExp node)
    {
        defaultIn(node);
    }

    public void outAExpNaoExp(AExpNaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNaoExp(AExpNaoExp node)
    {
        inAExpNaoExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getNaoOp() != null)
        {
            node.getNaoOp().apply(this);
        }
        outAExpNaoExp(node);
    }

    public void inAExpEExp(AExpEExp node)
    {
        defaultIn(node);
    }

    public void outAExpEExp(AExpEExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEExp(AExpEExp node)
    {
        inAExpEExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpEExp(node);
    }

    public void inAExpOuExp(AExpOuExp node)
    {
        defaultIn(node);
    }

    public void outAExpOuExp(AExpOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOuExp(AExpOuExp node)
    {
        inAExpOuExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpOuExp(node);
    }

    public void inAOpExp(AOpExp node)
    {
        defaultIn(node);
    }

    public void outAOpExp(AOpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpExp(AOpExp node)
    {
        inAOpExp(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAOpExp(node);
    }

    public void inAFactorOp(AFactorOp node)
    {
        defaultIn(node);
    }

    public void outAFactorOp(AFactorOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorOp(AFactorOp node)
    {
        inAFactorOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorOp(node);
    }

    public void inAMaisOp(AMaisOp node)
    {
        defaultIn(node);
    }

    public void outAMaisOp(AMaisOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisOp(AMaisOp node)
    {
        inAMaisOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAMaisOp(node);
    }

    public void inAMenosOp(AMenosOp node)
    {
        defaultIn(node);
    }

    public void outAMenosOp(AMenosOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOp(AMenosOp node)
    {
        inAMenosOp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        outAMenosOp(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAExpMultTermFactor(AExpMultTermFactor node)
    {
        defaultIn(node);
    }

    public void outAExpMultTermFactor(AExpMultTermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMultTermFactor(AExpMultTermFactor node)
    {
        inAExpMultTermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMultiplica() != null)
        {
            node.getMultiplica().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpMultTermFactor(node);
    }

    public void inAExpDivTermFactor(AExpDivTermFactor node)
    {
        defaultIn(node);
    }

    public void outAExpDivTermFactor(AExpDivTermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDivTermFactor(AExpDivTermFactor node)
    {
        inAExpDivTermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpDivTermFactor(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAVariavelTerm(AVariavelTerm node)
    {
        defaultIn(node);
    }

    public void outAVariavelTerm(AVariavelTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelTerm(AVariavelTerm node)
    {
        inAVariavelTerm(node);
        if(node.getVariavel() != null)
        {
            node.getVariavel().apply(this);
        }
        outAVariavelTerm(node);
    }

    public void inANegInteiroTerm(ANegInteiroTerm node)
    {
        defaultIn(node);
    }

    public void outANegInteiroTerm(ANegInteiroTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegInteiroTerm(ANegInteiroTerm node)
    {
        inANegInteiroTerm(node);
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        outANegInteiroTerm(node);
    }

    public void inANegRealTerm(ANegRealTerm node)
    {
        defaultIn(node);
    }

    public void outANegRealTerm(ANegRealTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegRealTerm(ANegRealTerm node)
    {
        inANegRealTerm(node);
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        outANegRealTerm(node);
    }

    public void inAExpPrioridadeTerm(AExpPrioridadeTerm node)
    {
        defaultIn(node);
    }

    public void outAExpPrioridadeTerm(AExpPrioridadeTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpPrioridadeTerm(AExpPrioridadeTerm node)
    {
        inAExpPrioridadeTerm(node);
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        outAExpPrioridadeTerm(node);
    }

    public void inAExpChamadaTerm(AExpChamadaTerm node)
    {
        defaultIn(node);
    }

    public void outAExpChamadaTerm(AExpChamadaTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpChamadaTerm(AExpChamadaTerm node)
    {
        inAExpChamadaTerm(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAExpChamadaTerm(node);
    }

    public void inANumeroInteiroVariavel(ANumeroInteiroVariavel node)
    {
        defaultIn(node);
    }

    public void outANumeroInteiroVariavel(ANumeroInteiroVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroInteiroVariavel(ANumeroInteiroVariavel node)
    {
        inANumeroInteiroVariavel(node);
        if(node.getNumeroInteiro() != null)
        {
            node.getNumeroInteiro().apply(this);
        }
        outANumeroInteiroVariavel(node);
    }

    public void inANumeroRealVariavel(ANumeroRealVariavel node)
    {
        defaultIn(node);
    }

    public void outANumeroRealVariavel(ANumeroRealVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealVariavel(ANumeroRealVariavel node)
    {
        inANumeroRealVariavel(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumeroRealVariavel(node);
    }

    public void inACaractereVariavel(ACaractereVariavel node)
    {
        defaultIn(node);
    }

    public void outACaractereVariavel(ACaractereVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereVariavel(ACaractereVariavel node)
    {
        inACaractereVariavel(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereVariavel(node);
    }

    public void inABoolSimVariavel(ABoolSimVariavel node)
    {
        defaultIn(node);
    }

    public void outABoolSimVariavel(ABoolSimVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolSimVariavel(ABoolSimVariavel node)
    {
        inABoolSimVariavel(node);
        if(node.getBoolSim() != null)
        {
            node.getBoolSim().apply(this);
        }
        outABoolSimVariavel(node);
    }

    public void inABoolNaoVariavel(ABoolNaoVariavel node)
    {
        defaultIn(node);
    }

    public void outABoolNaoVariavel(ABoolNaoVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolNaoVariavel(ABoolNaoVariavel node)
    {
        inABoolNaoVariavel(node);
        if(node.getBoolNao() != null)
        {
            node.getBoolNao().apply(this);
        }
        outABoolNaoVariavel(node);
    }

    public void inAStringVariavel(AStringVariavel node)
    {
        defaultIn(node);
    }

    public void outAStringVariavel(AStringVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringVariavel(AStringVariavel node)
    {
        inAStringVariavel(node);
        if(node.getCaractereVetor() != null)
        {
            node.getCaractereVetor().apply(this);
        }
        outAStringVariavel(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getDPar() != null)
        {
            node.getDPar().apply(this);
        }
        if(node.getListaExp() != null)
        {
            node.getListaExp().apply(this);
        }
        if(node.getEPar() != null)
        {
            node.getEPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamada(node);
    }

    public void inAListaExp(AListaExp node)
    {
        defaultIn(node);
    }

    public void outAListaExp(AListaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExp(AListaExp node)
    {
        inAListaExp(node);
        if(node.getListaAux1() != null)
        {
            node.getListaAux1().apply(this);
        }
        outAListaExp(node);
    }

    public void inAListaAux1(AListaAux1 node)
    {
        defaultIn(node);
    }

    public void outAListaAux1(AListaAux1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAux1(AListaAux1 node)
    {
        inAListaAux1(node);
        {
            List<PListaAux2> copy = new ArrayList<PListaAux2>(node.getListaAux2());
            Collections.reverse(copy);
            for(PListaAux2 e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAListaAux1(node);
    }

    public void inAListaAux2(AListaAux2 node)
    {
        defaultIn(node);
    }

    public void outAListaAux2(AListaAux2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaAux2(AListaAux2 node)
    {
        inAListaAux2(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEParametro() != null)
        {
            node.getEParametro().apply(this);
        }
        outAListaAux2(node);
    }
}
