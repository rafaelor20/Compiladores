/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.node;

import cordel.analysis.*;

@SuppressWarnings("nls")
public final class AComandoEnquantoFechadoClosedStatement extends PClosedStatement
{
    private TEnquanto _enquanto_;
    private TEPar _ePar_;
    private PExp _exp_;
    private TDPar _dPar_;
    private TRepita _repita_;
    private PClosedStatement _closedStatement_;

    public AComandoEnquantoFechadoClosedStatement()
    {
        // Constructor
    }

    public AComandoEnquantoFechadoClosedStatement(
        @SuppressWarnings("hiding") TEnquanto _enquanto_,
        @SuppressWarnings("hiding") TEPar _ePar_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TDPar _dPar_,
        @SuppressWarnings("hiding") TRepita _repita_,
        @SuppressWarnings("hiding") PClosedStatement _closedStatement_)
    {
        // Constructor
        setEnquanto(_enquanto_);

        setEPar(_ePar_);

        setExp(_exp_);

        setDPar(_dPar_);

        setRepita(_repita_);

        setClosedStatement(_closedStatement_);

    }

    @Override
    public Object clone()
    {
        return new AComandoEnquantoFechadoClosedStatement(
            cloneNode(this._enquanto_),
            cloneNode(this._ePar_),
            cloneNode(this._exp_),
            cloneNode(this._dPar_),
            cloneNode(this._repita_),
            cloneNode(this._closedStatement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandoEnquantoFechadoClosedStatement(this);
    }

    public TEnquanto getEnquanto()
    {
        return this._enquanto_;
    }

    public void setEnquanto(TEnquanto node)
    {
        if(this._enquanto_ != null)
        {
            this._enquanto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._enquanto_ = node;
    }

    public TEPar getEPar()
    {
        return this._ePar_;
    }

    public void setEPar(TEPar node)
    {
        if(this._ePar_ != null)
        {
            this._ePar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ePar_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TDPar getDPar()
    {
        return this._dPar_;
    }

    public void setDPar(TDPar node)
    {
        if(this._dPar_ != null)
        {
            this._dPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dPar_ = node;
    }

    public TRepita getRepita()
    {
        return this._repita_;
    }

    public void setRepita(TRepita node)
    {
        if(this._repita_ != null)
        {
            this._repita_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repita_ = node;
    }

    public PClosedStatement getClosedStatement()
    {
        return this._closedStatement_;
    }

    public void setClosedStatement(PClosedStatement node)
    {
        if(this._closedStatement_ != null)
        {
            this._closedStatement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closedStatement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._enquanto_)
            + toString(this._ePar_)
            + toString(this._exp_)
            + toString(this._dPar_)
            + toString(this._repita_)
            + toString(this._closedStatement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._enquanto_ == child)
        {
            this._enquanto_ = null;
            return;
        }

        if(this._ePar_ == child)
        {
            this._ePar_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._dPar_ == child)
        {
            this._dPar_ = null;
            return;
        }

        if(this._repita_ == child)
        {
            this._repita_ = null;
            return;
        }

        if(this._closedStatement_ == child)
        {
            this._closedStatement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._enquanto_ == oldChild)
        {
            setEnquanto((TEnquanto) newChild);
            return;
        }

        if(this._ePar_ == oldChild)
        {
            setEPar((TEPar) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._dPar_ == oldChild)
        {
            setDPar((TDPar) newChild);
            return;
        }

        if(this._repita_ == oldChild)
        {
            setRepita((TRepita) newChild);
            return;
        }

        if(this._closedStatement_ == oldChild)
        {
            setClosedStatement((PClosedStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
