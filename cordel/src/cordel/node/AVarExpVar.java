/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.node;

import cordel.analysis.*;

@SuppressWarnings("nls")
public final class AVarExpVar extends PVar
{
    private PVar _var_;
    private TECol _eCol_;
    private PExp _exp_;
    private TDCol _dCol_;

    public AVarExpVar()
    {
        // Constructor
    }

    public AVarExpVar(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TECol _eCol_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TDCol _dCol_)
    {
        // Constructor
        setVar(_var_);

        setECol(_eCol_);

        setExp(_exp_);

        setDCol(_dCol_);

    }

    @Override
    public Object clone()
    {
        return new AVarExpVar(
            cloneNode(this._var_),
            cloneNode(this._eCol_),
            cloneNode(this._exp_),
            cloneNode(this._dCol_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarExpVar(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TECol getECol()
    {
        return this._eCol_;
    }

    public void setECol(TECol node)
    {
        if(this._eCol_ != null)
        {
            this._eCol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eCol_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TDCol getDCol()
    {
        return this._dCol_;
    }

    public void setDCol(TDCol node)
    {
        if(this._dCol_ != null)
        {
            this._dCol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dCol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._eCol_)
            + toString(this._exp_)
            + toString(this._dCol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._eCol_ == child)
        {
            this._eCol_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._dCol_ == child)
        {
            this._dCol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._eCol_ == oldChild)
        {
            setECol((TECol) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._dCol_ == oldChild)
        {
            setDCol((TDCol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
