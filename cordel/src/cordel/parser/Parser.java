/* This file was generated by SableCC (http://www.sablecc.org/). */

package cordel.parser;

import cordel.lexer.*;
import cordel.node.*;
import cordel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprograma3Programa */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprograma4Programa */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce ADecVariavel */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAlistanomes1ListaNomes */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAlistanomes2ListaNomes */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AIdAux */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ATipoRumaTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ATipoInteiroTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ATipoCaractereTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ATipoRealTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce ATipoBoolTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce ADecFuncao */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ATipoTipoRetorno */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce ANadaTipoRetorno */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AAparametros1Parametros */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAparametros2Parametros */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAparametrosaux11ParametrosAux1 */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AAparametrosaux12ParametrosAux1 */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AParametrosAux2 */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AParametro */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AAbloco3Bloco */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AAbloco4Bloco */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AOpenStatementComando */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AClosedStatementComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ASeSimplesOpenStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce ASeAbertoOpenStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce ASeSenaoAbertoOpenStatement */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AComandoEnquantoAbertoOpenStatement */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AComandoArrodeieAbertoOpenStatement */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AClosedStatement */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce ASeFechadoClosedStatement */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AComandoEnquantoFechadoClosedStatement */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AComandoArrodeieFechadoClosedStatement */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AComandoRecebeSimpleStatement */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AComandoMandeSimpleStatement */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AComandoBlocoSimpleStatement */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AComandoChamadaSimpleStatement */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce AAtrib */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce AAlistaatrib1ListaAtrib */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list, false);
            }
            break;
            case 44: /* reduce AAlistaatrib2ListaAtrib */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list, false);
            }
            break;
            case 45: /* reduce AAtribAux */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list, false);
            }
            break;
            case 46: /* reduce AVarIdVar */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, false);
            }
            break;
            case 47: /* reduce AVarExpVar */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list, false);
            }
            break;
            case 48: /* reduce AExpIgualExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list, false);
            }
            break;
            case 49: /* reduce AExpMaiorIgualExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list, false);
            }
            break;
            case 50: /* reduce AExpMenorIgualExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce AExpMenorQueExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(21), list, false);
            }
            break;
            case 52: /* reduce AExpMaiorQueExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list, false);
            }
            break;
            case 53: /* reduce AExpNaoExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list, false);
            }
            break;
            case 54: /* reduce AExpEExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list, false);
            }
            break;
            case 55: /* reduce AExpOuExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce AOpExp */
            {
                ArrayList<Object> list = new56();
                push(goTo(21), list, false);
            }
            break;
            case 57: /* reduce AFactorOp */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list, false);
            }
            break;
            case 58: /* reduce AMaisOp */
            {
                ArrayList<Object> list = new58();
                push(goTo(22), list, false);
            }
            break;
            case 59: /* reduce AMenosOp */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list, false);
            }
            break;
            case 61: /* reduce AExpMultTermFactor */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list, false);
            }
            break;
            case 62: /* reduce AExpDivTermFactor */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list, false);
            }
            break;
            case 63: /* reduce AVarTerm */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list, false);
            }
            break;
            case 64: /* reduce AVariavelTerm */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, false);
            }
            break;
            case 65: /* reduce ANegInteiroTerm */
            {
                ArrayList<Object> list = new65();
                push(goTo(24), list, false);
            }
            break;
            case 66: /* reduce ANegRealTerm */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list, false);
            }
            break;
            case 67: /* reduce AExpPrioridadeTerm */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list, false);
            }
            break;
            case 68: /* reduce AExpChamadaTerm */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list, false);
            }
            break;
            case 69: /* reduce ANumeroInteiroVariavel */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list, false);
            }
            break;
            case 70: /* reduce ANumeroRealVariavel */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list, false);
            }
            break;
            case 71: /* reduce ACaractereVariavel */
            {
                ArrayList<Object> list = new71();
                push(goTo(25), list, false);
            }
            break;
            case 72: /* reduce ABoolSimVariavel */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list, false);
            }
            break;
            case 73: /* reduce ABoolNaoVariavel */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list, false);
            }
            break;
            case 74: /* reduce AStringVariavel */
            {
                ArrayList<Object> list = new74();
                push(goTo(25), list, false);
            }
            break;
            case 75: /* reduce AChamada */
            {
                ArrayList<Object> list = new75();
                push(goTo(26), list, false);
            }
            break;
            case 76: /* reduce AAlistaexp1ListaExp */
            {
                ArrayList<Object> list = new76();
                push(goTo(27), list, false);
            }
            break;
            case 77: /* reduce AAlistaexp2ListaExp */
            {
                ArrayList<Object> list = new77();
                push(goTo(27), list, false);
            }
            break;
            case 78: /* reduce AAlistaaux11ListaAux1 */
            {
                ArrayList<Object> list = new78();
                push(goTo(28), list, false);
            }
            break;
            case 79: /* reduce AAlistaaux12ListaAux1 */
            {
                ArrayList<Object> list = new79();
                push(goTo(28), list, false);
            }
            break;
            case 80: /* reduce AListaAux2 */
            {
                ArrayList<Object> list = new80();
                push(goTo(29), list, false);
            }
            break;
            case 81: /* reduce ATerminal$DecVariavel */
            {
                ArrayList<Object> list = new81();
                push(goTo(30), list, true);
            }
            break;
            case 82: /* reduce ANonTerminal$DecVariavel */
            {
                ArrayList<Object> list = new82();
                push(goTo(30), list, true);
            }
            break;
            case 83: /* reduce ATerminal$DecFuncao */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list, true);
            }
            break;
            case 84: /* reduce ANonTerminal$DecFuncao */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list, true);
            }
            break;
            case 85: /* reduce ATerminal$IdAux */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list, true);
            }
            break;
            case 86: /* reduce ANonTerminal$IdAux */
            {
                ArrayList<Object> list = new86();
                push(goTo(32), list, true);
            }
            break;
            case 87: /* reduce ATerminal$ParametrosAux2 */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list, true);
            }
            break;
            case 88: /* reduce ANonTerminal$ParametrosAux2 */
            {
                ArrayList<Object> list = new88();
                push(goTo(33), list, true);
            }
            break;
            case 89: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list, true);
            }
            break;
            case 90: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new90();
                push(goTo(34), list, true);
            }
            break;
            case 91: /* reduce ATerminal$AtribAux */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list, true);
            }
            break;
            case 92: /* reduce ANonTerminal$AtribAux */
            {
                ArrayList<Object> list = new92();
                push(goTo(35), list, true);
            }
            break;
            case 93: /* reduce ATerminal$ListaAux2 */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list, true);
            }
            break;
            case 94: /* reduce ANonTerminal$ListaAux2 */
            {
                ArrayList<Object> list = new94();
                push(goTo(36), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode2, listNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pprogramaNode1 = new APrograma(listNode3, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprograma3Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramaNode1 = new APrograma(listNode2, listNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprograma4Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprogramaNode1 = new APrograma(listNode3, listNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariavel pdecvariavelNode1;
        {
            // Block
        PTipo ptipoNode2;
        PListaNomes plistanomesNode3;
        TPontoVirgula tpontovirgulaNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        plistanomesNode3 = (PListaNomes)nodeArrayList2.get(0);
        tpontovirgulaNode4 = (TPontoVirgula)nodeArrayList3.get(0);

        pdecvariavelNode1 = new ADecVariavel(ptipoNode2, plistanomesNode3, tpontovirgulaNode4);
        }
	nodeList.add(pdecvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAlistanomes1ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaNomes plistanomesNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        plistanomesNode1 = new AListaNomes(tidNode2, listNode3);
        }
	nodeList.add(plistanomesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAlistanomes2ListaNomes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaNomes plistanomesNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistanomesNode1 = new AListaNomes(tidNode2, listNode4);
        }
	nodeList.add(plistanomesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAux pidauxNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        TId tidNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pidauxNode1 = new AIdAux(tvirgulaNode2, tidNode3);
        }
	nodeList.add(pidauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATipoRumaTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TRuma trumaNode2;
        TDe tdeNode3;
        PTipoBase ptipobaseNode4;
        TECol tecolNode5;
        PExp pexpNode6;
        TDCol tdcolNode7;
        trumaNode2 = (TRuma)nodeArrayList1.get(0);
        tdeNode3 = (TDe)nodeArrayList2.get(0);
        ptipobaseNode4 = (PTipoBase)nodeArrayList3.get(0);
        tecolNode5 = (TECol)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tdcolNode7 = (TDCol)nodeArrayList6.get(0);

        ptipoNode1 = new ATipoRumaTipo(trumaNode2, tdeNode3, ptipobaseNode4, tecolNode5, pexpNode6, tdcolNode7);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATipoInteiroTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoInteiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipoInteiro)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoInteiroTipoBase(ttipointeiroNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipoCaractereTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoCaractere ttipocaractereNode2;
        ttipocaractereNode2 = (TTipoCaractere)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoCaractereTipoBase(ttipocaractereNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATipoRealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoReal ttiporealNode2;
        ttiporealNode2 = (TTipoReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoRealTipoBase(ttiporealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATipoBoolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoBool ttipoboolNode2;
        ttipoboolNode2 = (TTipoBool)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoBoolTipoBase(ttipoboolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ADecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFuncao pdecfuncaoNode1;
        {
            // Block
        TArrume tarrumeNode2;
        PTipoRetorno ptiporetornoNode3;
        TAssim tassimNode4;
        TDoisPontos tdoispontosNode5;
        TId tidNode6;
        TEPar teparNode7;
        PParametros pparametrosNode8;
        TDPar tdparNode9;
        PBloco pblocoNode10;
        tarrumeNode2 = (TArrume)nodeArrayList1.get(0);
        ptiporetornoNode3 = (PTipoRetorno)nodeArrayList2.get(0);
        tassimNode4 = (TAssim)nodeArrayList3.get(0);
        tdoispontosNode5 = (TDoisPontos)nodeArrayList4.get(0);
        tidNode6 = (TId)nodeArrayList5.get(0);
        teparNode7 = (TEPar)nodeArrayList6.get(0);
        pparametrosNode8 = (PParametros)nodeArrayList7.get(0);
        tdparNode9 = (TDPar)nodeArrayList8.get(0);
        pblocoNode10 = (PBloco)nodeArrayList9.get(0);

        pdecfuncaoNode1 = new ADecFuncao(tarrumeNode2, ptiporetornoNode3, tassimNode4, tdoispontosNode5, tidNode6, teparNode7, pparametrosNode8, tdparNode9, pblocoNode10);
        }
	nodeList.add(pdecfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipoTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoRetorno ptiporetornoNode1;
        {
            // Block
        PTipo ptipoNode2;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);

        ptiporetornoNode1 = new ATipoTipoRetorno(ptipoNode2);
        }
	nodeList.add(ptiporetornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANadaTipoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoRetorno ptiporetornoNode1;
        {
            // Block
        TNada tnadaNode2;
        tnadaNode2 = (TNada)nodeArrayList1.get(0);

        ptiporetornoNode1 = new ANadaTipoRetorno(tnadaNode2);
        }
	nodeList.add(ptiporetornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pparametrosNode1 = new AParametros(null);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametrosAux1 pparametrosaux1Node2;
        pparametrosaux1Node2 = (PParametrosAux1)nodeArrayList1.get(0);

        pparametrosNode1 = new AParametros(pparametrosaux1Node2);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAparametrosaux11ParametrosAux1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAux1 pparametrosaux1Node1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosaux1Node1 = new AParametrosAux1(pparametroNode2, listNode3);
        }
	nodeList.add(pparametrosaux1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAparametrosaux12ParametrosAux1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAux1 pparametrosaux1Node1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosaux1Node1 = new AParametrosAux1(pparametroNode2, listNode4);
        }
	nodeList.add(pparametrosaux1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AParametrosAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametrosAux2 pparametrosaux2Node1;
        {
            // Block
        TEParametro teparametroNode2;
        PParametro pparametroNode3;
        teparametroNode2 = (TEParametro)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pparametrosaux2Node1 = new AParametrosAux2(teparametroNode2, pparametroNode3);
        }
	nodeList.add(pparametrosaux2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new AParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TBlocoInicio tblocoinicioNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TBlocoFim tblocofimNode5;
        tblocoinicioNode2 = (TBlocoInicio)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tblocofimNode5 = (TBlocoFim)nodeArrayList2.get(0);

        pblocoNode1 = new ABloco(tblocoinicioNode2, listNode3, listNode4, tblocofimNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TBlocoInicio tblocoinicioNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TBlocoFim tblocofimNode6;
        tblocoinicioNode2 = (TBlocoInicio)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        tblocofimNode6 = (TBlocoFim)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tblocoinicioNode2, listNode4, listNode5, tblocofimNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAbloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TBlocoInicio tblocoinicioNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TBlocoFim tblocofimNode6;
        tblocoinicioNode2 = (TBlocoInicio)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tblocofimNode6 = (TBlocoFim)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tblocoinicioNode2, listNode3, listNode5, tblocofimNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAbloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TBlocoInicio tblocoinicioNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TBlocoFim tblocofimNode7;
        tblocoinicioNode2 = (TBlocoInicio)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tblocofimNode7 = (TBlocoFim)nodeArrayList4.get(0);

        pblocoNode1 = new ABloco(tblocoinicioNode2, listNode4, listNode6, tblocofimNode7);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AOpenStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        POpenStatement popenstatementNode2;
        popenstatementNode2 = (POpenStatement)nodeArrayList1.get(0);

        pcomandoNode1 = new AOpenStatementComando(popenstatementNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AClosedStatementComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PClosedStatement pclosedstatementNode2;
        pclosedstatementNode2 = (PClosedStatement)nodeArrayList1.get(0);

        pcomandoNode1 = new AClosedStatementComando(pclosedstatementNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASeSimplesOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpenStatement popenstatementNode1;
        {
            // Block
        TSe tseNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        PSimpleStatement psimplestatementNode6;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        psimplestatementNode6 = (PSimpleStatement)nodeArrayList5.get(0);

        popenstatementNode1 = new ASeSimplesOpenStatement(tseNode2, teparNode3, pexpNode4, tdparNode5, psimplestatementNode6);
        }
	nodeList.add(popenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASeAbertoOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpenStatement popenstatementNode1;
        {
            // Block
        TSe tseNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        POpenStatement popenstatementNode6;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        popenstatementNode6 = (POpenStatement)nodeArrayList5.get(0);

        popenstatementNode1 = new ASeAbertoOpenStatement(tseNode2, teparNode3, pexpNode4, tdparNode5, popenstatementNode6);
        }
	nodeList.add(popenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ASeSenaoAbertoOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpenStatement popenstatementNode1;
        {
            // Block
        TSe tseNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        PClosedStatement pclosedstatementNode6;
        TSenao tsenaoNode7;
        POpenStatement popenstatementNode8;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        pclosedstatementNode6 = (PClosedStatement)nodeArrayList5.get(0);
        tsenaoNode7 = (TSenao)nodeArrayList6.get(0);
        popenstatementNode8 = (POpenStatement)nodeArrayList7.get(0);

        popenstatementNode1 = new ASeSenaoAbertoOpenStatement(tseNode2, teparNode3, pexpNode4, tdparNode5, pclosedstatementNode6, tsenaoNode7, popenstatementNode8);
        }
	nodeList.add(popenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AComandoEnquantoAbertoOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpenStatement popenstatementNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        TRepita trepitaNode6;
        POpenStatement popenstatementNode7;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        trepitaNode6 = (TRepita)nodeArrayList5.get(0);
        popenstatementNode7 = (POpenStatement)nodeArrayList6.get(0);

        popenstatementNode1 = new AComandoEnquantoAbertoOpenStatement(tenquantoNode2, teparNode3, pexpNode4, tdparNode5, trepitaNode6, popenstatementNode7);
        }
	nodeList.add(popenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AComandoArrodeieAbertoOpenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpenStatement popenstatementNode1;
        {
            // Block
        TArrodeie tarrodeieNode2;
        TEPar teparNode3;
        PListaAtrib plistaatribNode4;
        TPontoVirgula tpontovirgulaNode5;
        PExp pexpNode6;
        TPontoVirgula tpontovirgulaNode7;
        PListaAtrib plistaatribNode8;
        TDPar tdparNode9;
        POpenStatement popenstatementNode10;
        tarrodeieNode2 = (TArrodeie)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        plistaatribNode4 = (PListaAtrib)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tpontovirgulaNode7 = (TPontoVirgula)nodeArrayList6.get(0);
        plistaatribNode8 = (PListaAtrib)nodeArrayList7.get(0);
        tdparNode9 = (TDPar)nodeArrayList8.get(0);
        popenstatementNode10 = (POpenStatement)nodeArrayList9.get(0);

        popenstatementNode1 = new AComandoArrodeieAbertoOpenStatement(tarrodeieNode2, teparNode3, plistaatribNode4, tpontovirgulaNode5, pexpNode6, tpontovirgulaNode7, plistaatribNode8, tdparNode9, popenstatementNode10);
        }
	nodeList.add(popenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClosedStatement pclosedstatementNode1;
        {
            // Block
        PSimpleStatement psimplestatementNode2;
        psimplestatementNode2 = (PSimpleStatement)nodeArrayList1.get(0);

        pclosedstatementNode1 = new AClosedStatement(psimplestatementNode2);
        }
	nodeList.add(pclosedstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASeFechadoClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClosedStatement pclosedstatementNode1;
        {
            // Block
        TSe tseNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        PClosedStatement pclosedstatementNode6;
        TSenao tsenaoNode7;
        PClosedStatement pclosedstatementNode8;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        pclosedstatementNode6 = (PClosedStatement)nodeArrayList5.get(0);
        tsenaoNode7 = (TSenao)nodeArrayList6.get(0);
        pclosedstatementNode8 = (PClosedStatement)nodeArrayList7.get(0);

        pclosedstatementNode1 = new ASeFechadoClosedStatement(tseNode2, teparNode3, pexpNode4, tdparNode5, pclosedstatementNode6, tsenaoNode7, pclosedstatementNode8);
        }
	nodeList.add(pclosedstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoEnquantoFechadoClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClosedStatement pclosedstatementNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TEPar teparNode3;
        PExp pexpNode4;
        TDPar tdparNode5;
        TRepita trepitaNode6;
        PClosedStatement pclosedstatementNode7;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);
        trepitaNode6 = (TRepita)nodeArrayList5.get(0);
        pclosedstatementNode7 = (PClosedStatement)nodeArrayList6.get(0);

        pclosedstatementNode1 = new AComandoEnquantoFechadoClosedStatement(tenquantoNode2, teparNode3, pexpNode4, tdparNode5, trepitaNode6, pclosedstatementNode7);
        }
	nodeList.add(pclosedstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AComandoArrodeieFechadoClosedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClosedStatement pclosedstatementNode1;
        {
            // Block
        TArrodeie tarrodeieNode2;
        TEPar teparNode3;
        PListaAtrib plistaatribNode4;
        TPontoVirgula tpontovirgulaNode5;
        PExp pexpNode6;
        TPontoVirgula tpontovirgulaNode7;
        PListaAtrib plistaatribNode8;
        TDPar tdparNode9;
        PClosedStatement pclosedstatementNode10;
        tarrodeieNode2 = (TArrodeie)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        plistaatribNode4 = (PListaAtrib)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tpontovirgulaNode7 = (TPontoVirgula)nodeArrayList6.get(0);
        plistaatribNode8 = (PListaAtrib)nodeArrayList7.get(0);
        tdparNode9 = (TDPar)nodeArrayList8.get(0);
        pclosedstatementNode10 = (PClosedStatement)nodeArrayList9.get(0);

        pclosedstatementNode1 = new AComandoArrodeieFechadoClosedStatement(tarrodeieNode2, teparNode3, plistaatribNode4, tpontovirgulaNode5, pexpNode6, tpontovirgulaNode7, plistaatribNode8, tdparNode9, pclosedstatementNode10);
        }
	nodeList.add(pclosedstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AComandoRecebeSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PAtrib patribNode2;
        TPontoVirgula tpontovirgulaNode3;
        patribNode2 = (PAtrib)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        psimplestatementNode1 = new AComandoRecebeSimpleStatement(patribNode2, tpontovirgulaNode3);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AComandoMandeSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        TMande tmandeNode2;
        TDe tdeNode3;
        TVolta tvoltaNode4;
        PExp pexpNode5;
        TPontoVirgula tpontovirgulaNode6;
        tmandeNode2 = (TMande)nodeArrayList1.get(0);
        tdeNode3 = (TDe)nodeArrayList2.get(0);
        tvoltaNode4 = (TVolta)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        psimplestatementNode1 = new AComandoMandeSimpleStatement(tmandeNode2, tdeNode3, tvoltaNode4, pexpNode5, tpontovirgulaNode6);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AComandoBlocoSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        psimplestatementNode1 = new AComandoBlocoSimpleStatement(pblocoNode2);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AComandoChamadaSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PChamada pchamadaNode2;
        TPontoVirgula tpontovirgulaNode3;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        psimplestatementNode1 = new AComandoChamadaSimpleStatement(pchamadaNode2, tpontovirgulaNode3);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtrib patribNode1;
        {
            // Block
        PVar pvarNode2;
        TRecebe trecebeNode3;
        PExp pexpNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        trecebeNode3 = (TRecebe)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        patribNode1 = new AAtrib(pvarNode2, trecebeNode3, pexpNode4);
        }
	nodeList.add(patribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAlistaatrib1ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        PAtrib patribNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        patribNode2 = (PAtrib)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaatribNode1 = new AListaAtrib(patribNode2, listNode3);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAlistaatrib2ListaAtrib */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAtrib plistaatribNode1;
        {
            // Block
        PAtrib patribNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        patribNode2 = (PAtrib)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaatribNode1 = new AListaAtrib(patribNode2, listNode4);
        }
	nodeList.add(plistaatribNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtribAux patribauxNode1;
        {
            // Block
        TVirgula tvirgulaNode2;
        PAtrib patribNode3;
        tvirgulaNode2 = (TVirgula)nodeArrayList1.get(0);
        patribNode3 = (PAtrib)nodeArrayList2.get(0);

        patribauxNode1 = new AAtribAux(tvirgulaNode2, patribNode3);
        }
	nodeList.add(patribauxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AVarIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AVarIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AVarExpVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVar pvarNode2;
        TECol tecolNode3;
        PExp pexpNode4;
        TDCol tdcolNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tecolNode3 = (TECol)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tdcolNode5 = (TDCol)nodeArrayList4.get(0);

        pvarNode1 = new AVarExpVar(pvarNode2, tecolNode3, pexpNode4, tdcolNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TIgual tigualNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpIgualExp(pexpNode2, tigualNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExpMaiorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaiorIgual tmaiorigualNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorigualNode3 = (TMaiorIgual)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpMaiorIgualExp(pexpNode2, tmaiorigualNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpMenorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenorIgual tmenorigualNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorigualNode3 = (TMenorIgual)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpMenorIgualExp(pexpNode2, tmenorigualNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExpMenorQueExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenorQue tmenorqueNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorqueNode3 = (TMenorQue)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpMenorQueExp(pexpNode2, tmenorqueNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpMaiorQueExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaiorQue tmaiorqueNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorqueNode3 = (TMaiorQue)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpMaiorQueExp(pexpNode2, tmaiorqueNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpNaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNaoOp tnaoopNode2;
        POp popNode3;
        tnaoopNode2 = (TNaoOp)nodeArrayList1.get(0);
        popNode3 = (POp)nodeArrayList2.get(0);

        pexpNode1 = new AExpNaoExp(tnaoopNode2, popNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AExpEExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TE teNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpEExp(pexpNode2, teNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExpOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        POp popNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        popNode4 = (POp)nodeArrayList3.get(0);

        pexpNode1 = new AExpOuExp(pexpNode2, touNode3, popNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AOpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        POp popNode2;
        popNode2 = (POp)nodeArrayList1.get(0);

        pexpNode1 = new AOpExp(popNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AFactorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        popNode1 = new AFactorOp(pfactorNode2);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMaisOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        POp popNode2;
        TMais tmaisNode3;
        PFactor pfactorNode4;
        popNode2 = (POp)nodeArrayList1.get(0);
        tmaisNode3 = (TMais)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        popNode1 = new AMaisOp(popNode2, tmaisNode3, pfactorNode4);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMenosOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POp popNode1;
        {
            // Block
        POp popNode2;
        TMenos tmenosNode3;
        PFactor pfactorNode4;
        popNode2 = (POp)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        popNode1 = new AMenosOp(popNode2, tmenosNode3, pfactorNode4);
        }
	nodeList.add(popNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpMultTermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMultiplica tmultiplicaNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmultiplicaNode3 = (TMultiplica)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AExpMultTermFactor(pfactorNode2, tmultiplicaNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpDivTermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDivide tdivideNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivideNode3 = (TDivide)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AExpDivTermFactor(pfactorNode2, tdivideNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AVarTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ptermNode1 = new AVarTerm(pvarNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AVariavelTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PVariavel pvariavelNode2;
        pvariavelNode2 = (PVariavel)nodeArrayList1.get(0);

        ptermNode1 = new AVariavelTerm(pvariavelNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANegInteiroTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TEPar teparNode2;
        TMenos tmenosNode3;
        TNumeroInteiro tnumerointeiroNode4;
        TDPar tdparNode5;
        teparNode2 = (TEPar)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        tnumerointeiroNode4 = (TNumeroInteiro)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);

        ptermNode1 = new ANegInteiroTerm(teparNode2, tmenosNode3, tnumerointeiroNode4, tdparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANegRealTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TEPar teparNode2;
        TMenos tmenosNode3;
        TNumeroReal tnumerorealNode4;
        TDPar tdparNode5;
        teparNode2 = (TEPar)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        tnumerorealNode4 = (TNumeroReal)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);

        ptermNode1 = new ANegRealTerm(teparNode2, tmenosNode3, tnumerorealNode4, tdparNode5);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AExpPrioridadeTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TEPar teparNode2;
        PExp pexpNode3;
        TDPar tdparNode4;
        teparNode2 = (TEPar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tdparNode4 = (TDPar)nodeArrayList3.get(0);

        ptermNode1 = new AExpPrioridadeTerm(teparNode2, pexpNode3, tdparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AExpChamadaTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PChamada pchamadaNode2;
        pchamadaNode2 = (PChamada)nodeArrayList1.get(0);

        ptermNode1 = new AExpChamadaTerm(pchamadaNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANumeroInteiroVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TNumeroInteiro tnumerointeiroNode2;
        tnumerointeiroNode2 = (TNumeroInteiro)nodeArrayList1.get(0);

        pvariavelNode1 = new ANumeroInteiroVariavel(tnumerointeiroNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANumeroRealVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvariavelNode1 = new ANumeroRealVariavel(tnumerorealNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ACaractereVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        pvariavelNode1 = new ACaractereVariavel(tcaractereNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ABoolSimVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TBoolSim tboolsimNode2;
        tboolsimNode2 = (TBoolSim)nodeArrayList1.get(0);

        pvariavelNode1 = new ABoolSimVariavel(tboolsimNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ABoolNaoVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TBoolNao tboolnaoNode2;
        tboolnaoNode2 = (TBoolNao)nodeArrayList1.get(0);

        pvariavelNode1 = new ABoolNaoVariavel(tboolnaoNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AStringVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariavel pvariavelNode1;
        {
            // Block
        TCaractereVetor tcaracterevetorNode2;
        tcaracterevetorNode2 = (TCaractereVetor)nodeArrayList1.get(0);

        pvariavelNode1 = new AStringVariavel(tcaracterevetorNode2);
        }
	nodeList.add(pvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AChamada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamada pchamadaNode1;
        {
            // Block
        TId tidNode2;
        TEPar teparNode3;
        PListaExp plistaexpNode4;
        TDPar tdparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        teparNode3 = (TEPar)nodeArrayList2.get(0);
        plistaexpNode4 = (PListaExp)nodeArrayList3.get(0);
        tdparNode5 = (TDPar)nodeArrayList4.get(0);

        pchamadaNode1 = new AChamada(tidNode2, teparNode3, plistaexpNode4, tdparNode5);
        }
	nodeList.add(pchamadaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAlistaexp1ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListaExp plistaexpNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        plistaexpNode1 = new AListaExp(null);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAlistaexp2ListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaExp plistaexpNode1;
        {
            // Block
        PListaAux1 plistaaux1Node2;
        plistaaux1Node2 = (PListaAux1)nodeArrayList1.get(0);

        plistaexpNode1 = new AListaExp(plistaaux1Node2);
        }
	nodeList.add(plistaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAlistaaux11ListaAux1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAux1 plistaaux1Node1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        }

        plistaaux1Node1 = new AListaAux1(pexpNode2, listNode3);
        }
	nodeList.add(plistaaux1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAlistaaux12ListaAux1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAux1 plistaaux1Node1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistaaux1Node1 = new AListaAux1(pexpNode2, listNode4);
        }
	nodeList.add(plistaaux1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AListaAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListaAux2 plistaaux2Node1;
        {
            // Block
        TEParametro teparametroNode2;
        PExp pexpNode3;
        teparametroNode2 = (TEParametro)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        plistaaux2Node1 = new AListaAux2(teparametroNode2, pexpNode3);
        }
	nodeList.add(plistaaux2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecVariavel pdecvariavelNode1;
        pdecvariavelNode1 = (PDecVariavel)nodeArrayList1.get(0);
	if(pdecvariavelNode1 != null)
	{
	  listNode2.add(pdecvariavelNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$DecVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecVariavel pdecvariavelNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecvariavelNode2 = (PDecVariavel)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecvariavelNode2 != null)
	{
	  listNode3.add(pdecvariavelNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecFuncao pdecfuncaoNode1;
        pdecfuncaoNode1 = (PDecFuncao)nodeArrayList1.get(0);
	if(pdecfuncaoNode1 != null)
	{
	  listNode2.add(pdecfuncaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$DecFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecFuncao pdecfuncaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdecfuncaoNode2 = (PDecFuncao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdecfuncaoNode2 != null)
	{
	  listNode3.add(pdecfuncaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdAux pidauxNode1;
        pidauxNode1 = (PIdAux)nodeArrayList1.get(0);
	if(pidauxNode1 != null)
	{
	  listNode2.add(pidauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$IdAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PIdAux pidauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidauxNode2 = (PIdAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidauxNode2 != null)
	{
	  listNode3.add(pidauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$ParametrosAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametrosAux2 pparametrosaux2Node1;
        pparametrosaux2Node1 = (PParametrosAux2)nodeArrayList1.get(0);
	if(pparametrosaux2Node1 != null)
	{
	  listNode2.add(pparametrosaux2Node1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$ParametrosAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParametrosAux2 pparametrosaux2Node2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparametrosaux2Node2 = (PParametrosAux2)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparametrosaux2Node2 != null)
	{
	  listNode3.add(pparametrosaux2Node2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ATerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAtribAux patribauxNode1;
        patribauxNode1 = (PAtribAux)nodeArrayList1.get(0);
	if(patribauxNode1 != null)
	{
	  listNode2.add(patribauxNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANonTerminal$AtribAux */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAtribAux patribauxNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        patribauxNode2 = (PAtribAux)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(patribauxNode2 != null)
	{
	  listNode3.add(patribauxNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATerminal$ListaAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PListaAux2 plistaaux2Node1;
        plistaaux2Node1 = (PListaAux2)nodeArrayList1.get(0);
	if(plistaaux2Node1 != null)
	{
	  listNode2.add(plistaaux2Node1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ANonTerminal$ListaAux2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PListaAux2 plistaaux2Node2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistaaux2Node2 = (PListaAux2)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistaaux2Node2 != null)
	{
	  listNode3.add(plistaaux2Node2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {19, SHIFT, 6}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 5}, {11, SHIFT, 14}, },
			{{-1, ERROR, 6}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {23, SHIFT, 15}, },
			{{-1, ERROR, 7}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 9}, {47, SHIFT, 18}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 1}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {19, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {19, SHIFT, 6}, },
			{{-1, ERROR, 14}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 17}, {20, SHIFT, 24}, },
			{{-1, REDUCE, 5}, {42, SHIFT, 25}, },
			{{-1, ERROR, 19}, {44, SHIFT, 28}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 3}, {19, SHIFT, 6}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 23}, {36, SHIFT, 29}, },
			{{-1, ERROR, 24}, {43, SHIFT, 30}, },
			{{-1, ERROR, 25}, {47, SHIFT, 31}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 6}, {42, SHIFT, 25}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 29}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 30}, {47, SHIFT, 49}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 39}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 40}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {25, SHIFT, 51}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 46}, {38, SHIFT, 53}, },
			{{-1, REDUCE, 63}, {36, SHIFT, 54}, },
			{{-1, ERROR, 43}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {37, SHIFT, 62}, },
			{{-1, REDUCE, 56}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 57}, {26, SHIFT, 65}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 49}, {38, SHIFT, 67}, },
			{{-1, REDUCE, 53}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, ERROR, 51}, {2, SHIFT, 68}, {3, SHIFT, 69}, },
			{{-1, ERROR, 52}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {39, SHIFT, 70}, },
			{{-1, REDUCE, 76}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 54}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 55}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 56}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 57}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 58}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 59}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 60}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 61}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 63}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 64}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 65}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 66}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 17}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, },
			{{-1, ERROR, 68}, {39, SHIFT, 90}, },
			{{-1, ERROR, 69}, {39, SHIFT, 91}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 78}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {46, SHIFT, 92}, },
			{{-1, ERROR, 72}, {39, SHIFT, 95}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 74}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {37, SHIFT, 96}, },
			{{-1, REDUCE, 52}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 51}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 49}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 50}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 48}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 54}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 55}, {24, SHIFT, 63}, {25, SHIFT, 64}, },
			{{-1, REDUCE, 58}, {26, SHIFT, 65}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 59}, {26, SHIFT, 65}, {27, SHIFT, 66}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 86}, {47, SHIFT, 97}, },
			{{-1, ERROR, 87}, {39, SHIFT, 98}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, {46, SHIFT, 99}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 92}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 79}, {46, SHIFT, 92}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 98}, {12, SHIFT, 104}, },
			{{-1, ERROR, 99}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 20}, {46, SHIFT, 99}, },
			{{-1, REDUCE, 80}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 104}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {12, SHIFT, 104}, {13, SHIFT, 108}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 109}, {38, SHIFT, 123}, },
			{{-1, ERROR, 110}, {38, SHIFT, 124}, },
			{{-1, ERROR, 111}, {38, SHIFT, 125}, },
			{{-1, ERROR, 112}, {11, SHIFT, 126}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 118}, {44, SHIFT, 127}, },
			{{-1, ERROR, 119}, {36, SHIFT, 54}, {45, SHIFT, 128}, },
			{{-1, ERROR, 120}, {44, SHIFT, 129}, },
			{{-1, ERROR, 121}, {4, SHIFT, 1}, {5, SHIFT, 2}, {6, SHIFT, 3}, {7, SHIFT, 4}, {10, SHIFT, 5}, {12, SHIFT, 104}, {13, SHIFT, 130}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, ERROR, 122}, {12, SHIFT, 104}, {13, SHIFT, 132}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, ERROR, 123}, {47, SHIFT, 134}, },
			{{-1, ERROR, 124}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 125}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 126}, {22, SHIFT, 139}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 128}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 131}, {12, SHIFT, 104}, {13, SHIFT, 141}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 43}, {42, SHIFT, 142}, },
			{{-1, ERROR, 136}, {44, SHIFT, 145}, },
			{{-1, ERROR, 137}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {39, SHIFT, 146}, },
			{{-1, ERROR, 138}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {39, SHIFT, 147}, },
			{{-1, ERROR, 139}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 42}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 142}, {47, SHIFT, 134}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 44}, {42, SHIFT, 142}, },
			{{-1, ERROR, 145}, {0, SHIFT, 33}, {1, SHIFT, 34}, {2, SHIFT, 35}, {3, SHIFT, 36}, {8, SHIFT, 37}, {9, SHIFT, 38}, {33, SHIFT, 39}, {38, SHIFT, 40}, {47, SHIFT, 41}, },
			{{-1, ERROR, 146}, {16, SHIFT, 152}, },
			{{-1, ERROR, 147}, {12, SHIFT, 104}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, ERROR, 148}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {44, SHIFT, 156}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 151}, {28, SHIFT, 55}, {29, SHIFT, 56}, {30, SHIFT, 57}, {31, SHIFT, 58}, {32, SHIFT, 59}, {34, SHIFT, 60}, {35, SHIFT, 61}, {44, SHIFT, 157}, },
			{{-1, ERROR, 152}, {12, SHIFT, 104}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 154}, {18, SHIFT, 160}, },
			{{-1, REDUCE, 29}, {18, REDUCE, 34}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 157}, {47, SHIFT, 134}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 160}, {12, SHIFT, 104}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, ERROR, 161}, {39, SHIFT, 164}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 164}, {12, SHIFT, 104}, {14, SHIFT, 109}, {15, SHIFT, 110}, {17, SHIFT, 111}, {21, SHIFT, 112}, {47, SHIFT, 41}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 37}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 7}, },
			{{-1, 8}, {12, 20}, {121, 20}, },
			{{-1, 19}, },
			{{-1, 26}, {27, 32}, },
			{{-1, 9}, {6, 16}, {67, 86}, {99, 86}, },
			{{-1, 10}, {14, 23}, },
			{{-1, 11}, {13, 22}, {21, 22}, },
			{{-1, 17}, },
			{{-1, 87}, },
			{{-1, 88}, },
			{{-1, 100}, {101, 107}, },
			{{-1, 89}, {99, 106}, },
			{{-1, 113}, {98, 105}, },
			{{-1, 114}, {122, 133}, {131, 133}, },
			{{-1, 115}, {147, 153}, {152, 158}, {160, 162}, {164, 165}, },
			{{-1, 116}, {147, 154}, {152, 159}, {160, 163}, {164, 166}, },
			{{-1, 117}, {147, 155}, },
			{{-1, 118}, {123, 135}, {142, 149}, {157, 135}, },
			{{-1, 136}, {157, 161}, },
			{{-1, 143}, {144, 150}, },
			{{-1, 42}, {104, 119}, {121, 119}, {122, 119}, {123, 119}, {131, 119}, {142, 119}, {147, 119}, {152, 119}, {157, 119}, {160, 119}, {164, 119}, },
			{{-1, 43}, {40, 52}, {53, 71}, {54, 74}, {92, 102}, {124, 137}, {125, 138}, {128, 140}, {139, 148}, {145, 151}, },
			{{-1, 44}, {39, 50}, {55, 75}, {56, 76}, {57, 77}, {58, 78}, {59, 79}, {60, 80}, {61, 81}, },
			{{-1, 45}, {63, 82}, {64, 83}, },
			{{-1, 46}, {65, 84}, {66, 85}, },
			{{-1, 47}, },
			{{-1, 48}, {104, 120}, {121, 120}, {122, 120}, {131, 120}, {147, 120}, {152, 120}, {160, 120}, {164, 120}, },
			{{-1, 72}, },
			{{-1, 73}, },
			{{-1, 93}, {94, 103}, },
			{{-1, 12}, {104, 121}, },
			{{-1, 13}, {12, 21}, },
			{{-1, 27}, },
			{{-1, 101}, },
			{{-1, 122}, {121, 131}, },
			{{-1, 144}, },
			{{-1, 94}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma', 'arrume', EOF",
			"expecting: 'assim', '[', id",
			"expecting: 'de'",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma', 'nada'",
			"expecting: EOF",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma', 'inicio', 'fim', 'arrodeie', 'enquanto', 'se', 'arrume', 'mande', id, EOF",
			"expecting: id",
			"expecting: 'assim', id",
			"expecting: 'arrume', EOF",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano'",
			"expecting: 'assim'",
			"expecting: ',', ';'",
			"expecting: ';'",
			"expecting: '['",
			"expecting: ':'",
			"expecting: caractere, caractere vetor, numero inteiro, numero real, 'sim', 'nao', '!', '(', id",
			"expecting: '+', '-', '*', '/', '>', '<', '>=', '<=', '=', 'e', 'ou', ']', ')', ',', ';', '|'",
			"expecting: caractere, caractere vetor, numero inteiro, numero real, 'sim', 'nao', '(', id",
			"expecting: caractere, caractere vetor, numero inteiro, numero real, 'sim', 'nao', '-', '!', '(', id",
			"expecting: '+', '-', '*', '/', '>', '<', '>=', '<=', '=', 'e', 'ou', '[', ']', '(', ')', ',', ';', ':=', '|'",
			"expecting: '+', '-', '*', '/', '>', '<', '>=', '<=', '=', 'e', 'ou', '[', ']', ')', ',', ';', '|'",
			"expecting: '>', '<', '>=', '<=', '=', 'e', 'ou', ']'",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', 'e', 'ou', ']', ')', ',', ';', '|'",
			"expecting: '('",
			"expecting: numero inteiro, numero real",
			"expecting: '>', '<', '>=', '<=', '=', 'e', 'ou', ')'",
			"expecting: caractere, caractere vetor, numero inteiro, numero real, 'sim', 'nao', '!', '(', ')', id",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma', ')'",
			"expecting: ')'",
			"expecting: '>', '<', '>=', '<=', '=', 'e', 'ou', ')', '|'",
			"expecting: ')', '|'",
			"expecting: '+', '-', '*', '/', '>', '<', '>=', '<=', '=', 'e', 'ou', '[', ']', ')', ',', ';', ':=', '|'",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma'",
			"expecting: 'caractere', 'inteiro', 'real', 'booleano', 'ruma', 'inicio', 'fim', 'arrodeie', 'enquanto', 'se', 'mande', id",
			"expecting: 'inicio', 'fim', 'arrodeie', 'enquanto', 'se', 'senao', 'arrume', 'mande', id, EOF",
			"expecting: 'inicio', 'fim', 'arrodeie', 'enquanto', 'se', 'senao', 'mande', id",
			"expecting: 'inicio', 'fim', 'arrodeie', 'enquanto', 'se', 'mande', id",
			"expecting: '[', ':='",
			"expecting: 'volta'",
			"expecting: ')', ',', ';'",
			"expecting: '>', '<', '>=', '<=', '=', 'e', 'ou', ')', ',', ';'",
			"expecting: 'repita'",
			"expecting: 'inicio', 'arrodeie', 'enquanto', 'se', 'mande', id",
			"expecting: '>', '<', '>=', '<=', '=', 'e', 'ou', ';'",
			"expecting: 'senao'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 0, 8, 9, 10, 10, 10, 11, 12, 5, 8, 8, 13, 14, 6, 11, 11, 5, 15, 6, 11, 11, 16, 16, 16, 16, 16, 16, 17, 18, 19, 20, 21, 22, 16, 16, 16, 16, 23, 22, 24, 25, 26, 15, 17, 17, 17, 17, 17, 17, 17, 7, 17, 17, 17, 17, 27, 28, 28, 16, 29, 28, 28, 21, 22, 22, 22, 22, 22, 22, 22, 16, 16, 16, 16, 6, 28, 28, 30, 16, 16, 15, 30, 30, 16, 31, 30, 32, 33, 30, 30, 29, 30, 34, 8, 30, 30, 35, 23, 23, 23, 2, 36, 37, 37, 37, 36, 12, 38, 12, 34, 37, 6, 15, 15, 39, 36, 15, 36, 35, 37, 35, 37, 38, 40, 12, 25, 25, 15, 41, 35, 6, 40, 40, 15, 42, 43, 44, 40, 40, 44, 43, 37, 45, 36, 36, 6, 37, 36, 43, 28, 37, 36, 43, 37, 36, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
